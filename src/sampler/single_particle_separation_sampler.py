"""Module for the SingleParticleSeparationSampler class."""
from base.exceptions import ConfigurationError
from base.logging import log_init_arguments
from base.vectors import get_shortest_vectors_on_torus
from model_settings import size_of_particle_space
from .sampler import Sampler
import logging
import numpy as np


class SingleParticleSeparationSampler(Sampler):
    """
    Class for taking observations of a single particle-particle separation distance.
    """

    def __init__(self, output_directory: str):
        """
        The constructor of the SingleParticleSeparationSampler class.

        Parameters
        ----------
        output_directory : str
            The filename onto which the sample is written at the end of the run.

        Raises
        ------
        base.exceptions.ConfigurationError
            If dimensionality_of_particle_space does not equal 1.
        """
        super().__init__(output_directory)
        for component in np.atleast_1d(size_of_particle_space):
            if component is None:
                raise ConfigurationError(f"Give a float for each component of size_of_particle_space in [ModelSettings]"
                                         f" when using {self.__class__.__name__} as {self.__class__.__name__} is "
                                         f"designed for toroidal systems.")
        log_init_arguments(logging.getLogger(__name__).debug, self.__class__.__name__,
                           output_directory=output_directory)

    def initialise_sample_array(self, total_number_of_iterations):
        """
        Generate array that stores the sample.

        Parameters
        ----------
        total_number_of_iterations : int
            The total number of iterations of the Markov chain.

        Returns
        -------
        numpy.ndarray
            Numpy array of zeros of the required structure.
        """
        return np.zeros((total_number_of_iterations + 1, 1))

    def get_observation(self, momenta, positions, potential):
        """
        Returns an observation of the system for the given particle momenta and positions.

        Parameters
        ----------
        momenta : None or numpy.ndarray
            None or a two-dimensional numpy array of size (number_of_particles, dimensionality_of_particle_space); each
            element is a float and represents one Cartesian component of the momentum of a single particle.
        positions : numpy.ndarray
            A two-dimensional numpy array of size (number_of_particles, dimensionality_of_particle_space); each element
            is a float and represents one Cartesian component of the position of a single particle. For Bayesian
            models, the entire positions array corresponds to the parameter; for the Ginzburg-Landau potential on a
            lattice, the entire positions array corresponds to the entire array of superconducting phase.
        potential : float or potential.potential.Potential
            If a float, the current value of the potential; otherwise, an instance of the chosen child class of
            potential.potential.Potential.

        Returns
        -------
        float
            The observation of the mean of all shortest (on the torus) particle-separation vectors.
        """
        return np.linalg.norm(get_shortest_vectors_on_torus(positions[0] - positions[1]))

    def output_sample(self, sample, temperature_index):
        """
        Following completion of the Markov chain, print the sample to the output file.

        Parameters
        ----------
        sample : numpy.ndarray
            The sample generated by the Markov chain.
        temperature_index : int
            The index of the iteration through the list sampling temperatures.
        """
        self._write_sample_to_file(sample,
                                   f"temperature_{temperature_index:02d}_sample_of_single_particle_separation.npy")

    def get_sample(self, temperature_index):
        """
        In order to analyse the Markov chain in an external program, read the sample from the output file.

        Parameters
        ----------
        temperature_index : int
            The index of the iteration through the list sampling temperatures.

        Returns
        ----------
        numpy.ndarray
            The sample generated by the Markov chain.
        """
        return self._read_sample_from_file(
            f"temperature_{temperature_index:02d}_sample_of_single_particle_separation.npy")
