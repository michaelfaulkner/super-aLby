"""Module for the MomentumObserver class."""
from base.logging import log_init_arguments
from .observer import Observer
import logging


class MomentumObserver(Observer):
    """
    Class for taking observations of the momentum of the system.
    """

    def __init__(self, output_directory: str):
        """
        The constructor of the MomentumObserver class.

        This class is designed for cooperative inheritance, meaning that it passes through all unused kwargs in the
        init to the next class in the MRO via super.

        Parameters
        ----------
        output_directory : str
            The filename onto which the sample is written at the end of the run.
        """
        # todo add dimension_of_target_distribution here, probably a global variable from a settings module
        super().__init__(output_directory)
        log_init_arguments(logging.getLogger(__name__).debug, self.__class__.__name__,
                           output_directory=output_directory)

    def get_observation(self, momentum, position, charges=None):
        """
        Return the observation after each iteration of the Markov chain.

        Parameters
        ----------
        momentum : numpy_array
            The momentum associated with each position.
        position : numpy_array
            For soft-matter models, one or many particle-particle separation vectors {r_ij}; for Bayesian models, the
            parameter value; for the Ginzburg-Landau potential on a lattice, the entire array of superconducting phase.
        charges : optional
            All the charges needed to calculate the potential and its gradient.

        Returns
        -------
        numpy_array
            The observation of the momentum.
        """
        return momentum

    def output_sample(self, sample):
        """
        Following completion of the Markov chain, print the sample to the output file.

        Parameters
        ----------
        sample : numpy_array
            The sample generated by the Markov chain.
        """
        self._write_sample_to_file(sample, "sample_of_momenta.dat")
